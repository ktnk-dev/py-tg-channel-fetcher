import pytgcf
from colorama import (init as colorama_init, Fore as color)
colorama_init()
channel = True
nonexistchannel = False
summary = {
    'all': 0,
    'ok': 0,
    'warn': 0,
    'false': 0
}

def beauty(data):
    status_text = '–£—Å–ø–µ—à–Ω–æ' if data['status'] == True else '–ü—Ä–æ–≤–∞–ª–µ–Ω–æ'
    status_color = color.LIGHTGREEN_EX if data['status'] == True else color.LIGHTRED_EX if data['status'] == False else ...
    title = f'‚Äî‚Äî‚Äî {data["task"]} | {status_color}{status_text}{color.RESET} ‚Äî‚Äî‚Äî'
    output = title+''
    for test in data['tests']:
        test_status_text = '–£—Å–ø–µ—à–Ω–æ' if test['status'] == True else '–ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ' if test['status'] == None else '–ü—Ä–æ–≤–∞–ª–µ–Ω–æ'
        test_status_color = color.LIGHTGREEN_EX if test['status'] == True else color.LIGHTYELLOW_EX if test['status'] == None else color.LIGHTRED_EX
        result = f'‚Ä¢ {test["text"]}: {test_status_color}{test_status_text}{color.RESET}'
        if test['status'] != True:
            result += f'\n  –ù–µ—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–µ: {color.LIGHTYELLOW_EX}{test["a"]} {color.LIGHTRED_EX}!= {color.LIGHTGREEN_EX}{test["b"]}{color.RESET}'
            result += f'\n  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {test["critical_text"]}{color.RESET}' if test['critical_text'] else ''
        output+='\n'+result     
    return output+'\n'

def equal(a, b, text, critical=None):
    result = {}
    summary['all'] += 1
    result['text'] = text if text else None
    result['a'] = a
    result['b'] = b
    if a == b:
        summary['ok'] += 1
        return {
            'status': True,
            'text': text if text else None,
            'a': a,
            'b': b
        }
    else:
        result['status'] = None if critical != True else False
        summary['warn']  += 1 if critical != True else 0
        summary['false'] += 1 if critical == True else 0
        result['critical_text'] = critical if type(critical) == str else None

    return result
        

def findchannel():
    global channel
    channel = pytgcf.get('durov')
    result = {}
    result['task'] = '–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞'
    data = []
    if channel.status:
        result['status'] = True
        data.append(equal(channel.name, "Durov's Channel", '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–æ–≤–∞—Ç—å'))
        data.append(equal(channel.description, "Thoughts from the Product Manager / CEO / Founder of Telegram.", '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–æ–≤–∞—Ç—å'))
        data.append(equal('telegram-cdn.org/file/' in channel.picture, True, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞–Ω–∞–ª–∞', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–æ–≤–∞—Ç—å'))
    else: 
        result['status'] = False
        data.append(equal(None, "Durov's Channel", '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è', True))
        data.append(equal(None, "Thoughts from the Product Manager / CEO / Founder of Telegram.", '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è', True))
        data.append(equal('telegram-cdn.org/file/' in '', True, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞–Ω–∞–ª–∞', True))
    result['tests'] = data
    return result

def findunexistchannel():
    global nonexistchannel
    result = {}
    result['task'] = '–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞'
    nonexistchannel = pytgcf.get('channel-not-exists')
    result['status'] = not nonexistchannel.status
    result['tests'] = [equal(nonexistchannel.status, None,'–ù–µ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞', True)]
    return result


def findpostinunexistchannel():
    result = {}
    result['task'] = '–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–Ω–∞–ª–µ'
    r = nonexistchannel.post(99999)
    result['status'] = not r
    result['tests'] = [equal(r, None,'–ù–µ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞', True)]
    return result

def findunexistpostchannel():
    result = {}
    result['task'] = '–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ'
    r = channel.post(9999999)
    result['status'] = not r
    data = [equal(r, None,'–ù–µ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞', True)]
    result['tests'] = data
    return result

def findexistchannelpost():
    result = {}
    global post
    result['task'] = '–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ'
    post = channel.post(37)
    result['status'] = True if post else False
    if post: data = [equal(post.text,'I wonder who lit up all the candles in the cemetery üéÉ' ,'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è'),
                    equal(post.datetime, '2015-10-31T19:41:48+00:00', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–∏–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏', True),
                    equal('telegram-cdn.org/file/' in post.media[0], True, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è')]
    else: data = [equal(None,'I wonder who lit up all the candles in the cemetery üéÉ' ,'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞', True),
                  equal(None, '2015-10-31T19:41:48+00:00', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–∏–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏', True),
                  equal('telegram-cdn.org/file/' in '', True, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', True)]
    result['tests'] = data
    return result

def loadnonexistscommentsfrompost():
    result = {}
    result['task'] = '–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ—Å—Ç–µ'
    clim = post.comments()
    cid = post.comments(id=1234)
    if clim == cid == None: result['status'] = True
    else: result['status'] = False
    result['tests'] = [ equal(clim, None, '–ù–µ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', True),
                        equal(cid, None, '–ù–µ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–Ω–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', True)]
    return result


def loadexistcomments():
    global channel
    result = {'task': '–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
    channel = pytgcf.get('contest') 
    c = channel.post(198).comments(141108)
    result['status'] = True if c else False
    data = [
        equal(c.author.name, 'Deleted Account', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞', '–ê–≤—Ç–æ—Ä –º–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç'),
        equal(c.text, 'Im Rassia......', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞', '–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è'),
        equal(c.datetime, '2021-01-09T20:05:40+00:00', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏', True),
        equal(c.reply, 130198, '–ù–∞ –∫–∞–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –æ—Ç–≤–µ—Ç', True),
    ] if c else [
        equal(None, 'Deleted Account', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞', True),
        equal(None, 'Im Rassia......', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞', True),
        equal(None, '2021-01-09T20:05:40+00:00', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏', True),
        equal(None, 130198, '–ù–∞ –∫–∞–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –æ—Ç–≤–µ—Ç', True),
    ]
    result['tests'] = data
    return result




print(beauty(findunexistchannel()))
print(beauty(findpostinunexistchannel()))

print(beauty(findchannel()))
print(beauty(findunexistpostchannel()))
print(beauty(findexistchannelpost()))
print(beauty(loadnonexistscommentsfrompost()))
print(beauty(loadexistcomments()))

print(f'''‚Äî‚Äî‚Äî –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Äî‚Äî‚Äî
–£—Å–ø–µ—à–Ω–æ: {color.LIGHTRED_EX if summary['ok'] == 0 else color.LIGHTGREEN_EX}{summary['ok']}{color.RESET}
–ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ: {color.LIGHTGREEN_EX if summary['warn'] == 0 else color.LIGHTYELLOW_EX}{summary['warn']}{color.RESET}
–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {color.LIGHTGREEN_EX if summary['false'] == 0 else color.LIGHTRED_EX}{summary['false']}{color.RESET}''')
